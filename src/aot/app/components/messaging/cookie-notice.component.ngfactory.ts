/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../../app/components/messaging/cookie-notice.component';
import * as import1 from '@angular/core/src/linker/view';
import * as import2 from '@angular/core/src/render/api';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/metadata/view';
import * as import5 from '@angular/core/src/linker/view_type';
import * as import6 from '@angular/core/src/change_detection/constants';
import * as import7 from '@angular/core/src/linker/component_factory';
import * as import8 from '../../../node_modules/@angular/common/src/directives/ng_class.ngfactory';
import * as import9 from '../../../node_modules/@angular/router/src/directives/router_link.ngfactory';
import * as import10 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import11 from '@angular/core/src/change_detection/differs/keyvalue_differs';
import * as import12 from '@angular/core/src/linker/element_ref';
import * as import13 from '@angular/router/src/router';
import * as import14 from '@angular/router/src/router_state';
import * as import15 from '@angular/common/src/location/location_strategy';
import * as import16 from '@angular/router/src/directives/router_link';
import * as import17 from '@angular/common/src/directives/ng_class';
export class Wrapper_CookieNoticeComponent {
  /*private*/ _eventHandler:Function;
  context:import0.CookieNoticeComponent;
  /*private*/ _changed:boolean;
  constructor() {
    this._changed = false;
    this.context = new import0.CookieNoticeComponent();
  }
  ngOnDetach(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
  }
  ngDoCheck(view:import1.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); } }
    return changed;
  }
  checkHost(view:import1.AppView<any>,componentView:import1.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import1.AppView<any>,_eventHandler:any):void {
    this._eventHandler = _eventHandler;
  }
}
var renderType_CookieNoticeComponent_Host:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,([] as any[]),{});
class View_CookieNoticeComponent_Host0 extends import1.AppView<any> {
  _el_0:any;
  compView_0:import1.AppView<import0.CookieNoticeComponent>;
  _CookieNoticeComponent_0_3:Wrapper_CookieNoticeComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_CookieNoticeComponent_Host0,renderType_CookieNoticeComponent_Host,import5.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'app-cookie-notice',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_CookieNoticeComponent0(this.viewUtils,this,0,this._el_0);
    this._CookieNoticeComponent_0_3 = new Wrapper_CookieNoticeComponent();
    this.compView_0.create(this._CookieNoticeComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import7.ComponentRef_<any>(0,this,this._el_0,this._CookieNoticeComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.CookieNoticeComponent) && (0 === requestNodeIndex))) { return this._CookieNoticeComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._CookieNoticeComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const CookieNoticeComponentNgFactory:import7.ComponentFactory<import0.CookieNoticeComponent> = new import7.ComponentFactory<import0.CookieNoticeComponent>('app-cookie-notice',View_CookieNoticeComponent_Host0,import0.CookieNoticeComponent);
const styles_CookieNoticeComponent:any[] = ([] as any[]);
var renderType_CookieNoticeComponent:import2.RenderComponentType = import3.createRenderComponentType('',0,import4.ViewEncapsulation.None,styles_CookieNoticeComponent,{});
export class View_CookieNoticeComponent0 extends import1.AppView<import0.CookieNoticeComponent> {
  _el_0:any;
  _NgClass_0_3:import8.Wrapper_NgClass;
  _text_1:any;
  _el_2:any;
  _NgClass_2_3:import8.Wrapper_NgClass;
  _text_3:any;
  _el_4:any;
  _RouterLinkWithHref_4_3:import9.Wrapper_RouterLinkWithHref;
  _text_5:any;
  _text_6:any;
  _el_7:any;
  _text_8:any;
  _text_9:any;
  _text_10:any;
  _text_11:any;
  _map_15:any;
  _map_16:any;
  _arr_17:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import1.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_CookieNoticeComponent0,renderType_CookieNoticeComponent,import5.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import6.ChangeDetectorStatus.CheckAlways);
    this._map_15 = import3.pureProxy1((p0:any):{[key: string]:any} => {
      return {visible: p0};
    });
    this._map_16 = import3.pureProxy2((p0:any,p1:any):{[key: string]:any} => {
      return {
        visible: p0,
        remove: p1
      }
      ;
    });
    this._arr_17 = import3.pureProxy1((p0:any):any[] => {
      return [p0];
    });
  }
  createInternal(rootSelector:string):import7.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._el_0 = import3.createRenderElement(this.renderer,parentRenderNode,'div',new import3.InlineArray2(2,'class','cookie-notice-wrapper'),(null as any));
    this._NgClass_0_3 = new import8.Wrapper_NgClass(this.parentView.injectorGet(import10.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import11.KeyValueDiffers,this.parentIndex),new import12.ElementRef(this._el_0),this.renderer);
    this._text_1 = this.renderer.createText(this._el_0,'\n  ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,'div',new import3.InlineArray2(2,'class','cookie-notice'),(null as any));
    this._NgClass_2_3 = new import8.Wrapper_NgClass(this.parentView.injectorGet(import10.IterableDiffers,this.parentIndex),this.parentView.injectorGet(import11.KeyValueDiffers,this.parentIndex),new import12.ElementRef(this._el_2),this.renderer);
    this._text_3 = this.renderer.createText(this._el_2,'By continuing to use this site you\'re agreeing to our ',(null as any));
    this._el_4 = import3.createRenderElement(this.renderer,this._el_2,'a',new import3.InlineArray4(4,'class','text-link','href','#'),(null as any));
    this._RouterLinkWithHref_4_3 = new import9.Wrapper_RouterLinkWithHref(this.parentView.injectorGet(import13.Router,this.parentIndex),this.parentView.injectorGet(import14.ActivatedRoute,this.parentIndex),this.parentView.injectorGet(import15.LocationStrategy,this.parentIndex));
    this._text_5 = this.renderer.createText(this._el_4,'cookie policy',(null as any));
    this._text_6 = this.renderer.createText(this._el_2,' ',(null as any));
    this._el_7 = import3.createRenderElement(this.renderer,this._el_2,'a',new import3.InlineArray4(4,'class','btn btn-film','href','#'),(null as any));
    this._text_8 = this.renderer.createText(this._el_7,'Ok',(null as any));
    this._text_9 = this.renderer.createText(this._el_2,' ',(null as any));
    this._text_10 = this.renderer.createText(this._el_0,'\n',(null as any));
    this._text_11 = this.renderer.createText(parentRenderNode,'\n',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_4,new import3.InlineArray2(2,'click',(null as any)),this.eventHandler(this.handleEvent_4));
    var disposable_1:Function = import3.subscribeToRenderElement(this,this._el_7,new import3.InlineArray2(2,'click',(null as any)),this.eventHandler(this.handleEvent_7));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._el_4,
      this._text_5,
      this._text_6,
      this._el_7,
      this._text_8,
      this._text_9,
      this._text_10,
      this._text_11
    ]
    ),[
      disposable_0,
      disposable_1
    ]
    );
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import16.RouterLinkWithHref) && ((4 <= requestNodeIndex) && (requestNodeIndex <= 5)))) { return this._RouterLinkWithHref_4_3.context; }
    if (((token === import17.NgClass) && ((2 <= requestNodeIndex) && (requestNodeIndex <= 9)))) { return this._NgClass_2_3.context; }
    if (((token === import17.NgClass) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 10)))) { return this._NgClass_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = 'cookie-notice-wrapper';
    this._NgClass_0_3.check_klass(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = this._map_15((this.context.cookieSet === false));
    this._NgClass_0_3.check_ngClass(currVal_0_0_1,throwOnChange,false);
    this._NgClass_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    const currVal_2_0_0:any = 'cookie-notice';
    this._NgClass_2_3.check_klass(currVal_2_0_0,throwOnChange,false);
    const currVal_2_0_1:any = this._map_16(true,false);
    this._NgClass_2_3.check_ngClass(currVal_2_0_1,throwOnChange,false);
    this._NgClass_2_3.ngDoCheck(this,this._el_2,throwOnChange);
    const currVal_4_0_0:any = this._arr_17('/privacy-and-cookies');
    this._RouterLinkWithHref_4_3.check_routerLink(currVal_4_0_0,throwOnChange,false);
    this._RouterLinkWithHref_4_3.ngDoCheck(this,this._el_4,throwOnChange);
    this._RouterLinkWithHref_4_3.checkHost(this,this,this._el_4,throwOnChange);
  }
  destroyInternal():void {
    this._RouterLinkWithHref_4_3.ngOnDestroy();
  }
  handleEvent_4(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._RouterLinkWithHref_4_3.handleEvent(eventName,$event) && result);
    return result;
  }
  handleEvent_7(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'click')) {
      const pd_sub_0:any = ((<any>this.context.setCookie($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}