/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from 'angular2-swiper-wrapper/dist/lib/swiper.directive';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
export class Wrapper_SwiperDirective {
  /*private*/ _eventHandler:Function;
  context:import0.SwiperDirective;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  subscription3:any;
  subscription4:any;
  subscription5:any;
  subscription6:any;
  subscription7:any;
  subscription8:any;
  subscription9:any;
  subscription10:any;
  subscription11:any;
  subscription12:any;
  subscription13:any;
  subscription14:any;
  subscription15:any;
  subscription16:any;
  subscription17:any;
  subscription18:any;
  subscription19:any;
  subscription20:any;
  subscription21:any;
  subscription22:any;
  subscription23:any;
  subscription24:any;
  subscription25:any;
  subscription26:any;
  subscription27:any;
  subscription28:any;
  subscription29:any;
  subscription30:any;
  constructor(p0:any,p1:any,p2:any,p3:any) {
    this._changed = false;
    this._changes = {};
    this.context = new import0.SwiperDirective(p0,p1,p2,p3);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
    (this.subscription3 && this.subscription3.unsubscribe());
    (this.subscription4 && this.subscription4.unsubscribe());
    (this.subscription5 && this.subscription5.unsubscribe());
    (this.subscription6 && this.subscription6.unsubscribe());
    (this.subscription7 && this.subscription7.unsubscribe());
    (this.subscription8 && this.subscription8.unsubscribe());
    (this.subscription9 && this.subscription9.unsubscribe());
    (this.subscription10 && this.subscription10.unsubscribe());
    (this.subscription11 && this.subscription11.unsubscribe());
    (this.subscription12 && this.subscription12.unsubscribe());
    (this.subscription13 && this.subscription13.unsubscribe());
    (this.subscription14 && this.subscription14.unsubscribe());
    (this.subscription15 && this.subscription15.unsubscribe());
    (this.subscription16 && this.subscription16.unsubscribe());
    (this.subscription17 && this.subscription17.unsubscribe());
    (this.subscription18 && this.subscription18.unsubscribe());
    (this.subscription19 && this.subscription19.unsubscribe());
    (this.subscription20 && this.subscription20.unsubscribe());
    (this.subscription21 && this.subscription21.unsubscribe());
    (this.subscription22 && this.subscription22.unsubscribe());
    (this.subscription23 && this.subscription23.unsubscribe());
    (this.subscription24 && this.subscription24.unsubscribe());
    (this.subscription25 && this.subscription25.unsubscribe());
    (this.subscription26 && this.subscription26.unsubscribe());
    (this.subscription27 && this.subscription27.unsubscribe());
    (this.subscription28 && this.subscription28.unsubscribe());
    (this.subscription29 && this.subscription29.unsubscribe());
    (this.subscription30 && this.subscription30.unsubscribe());
  }
  check_disabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.disabled = currValue;
      this._changes['disabled'] = new import1.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_runInsideAngular(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.runInsideAngular = currValue;
      this._changes['runInsideAngular'] = new import1.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  check_config(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.config = currValue;
      this._changes['config'] = new import1.SimpleChange(this._expr_2,currValue);
      this._expr_2 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) {
      if (changed) {
        this.context.ngOnChanges(this._changes);
        this._changes = {};
      }
      if ((view.numberOfChecks === 0)) { this.context.ngOnInit(); }
      this.context.ngDoCheck();
    }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean,emit3:boolean,emit4:boolean,emit5:boolean,emit6:boolean,emit7:boolean,emit8:boolean,emit9:boolean,emit10:boolean,emit11:boolean,emit12:boolean,emit13:boolean,emit14:boolean,emit15:boolean,emit16:boolean,emit17:boolean,emit18:boolean,emit19:boolean,emit20:boolean,emit21:boolean,emit22:boolean,emit23:boolean,emit24:boolean,emit25:boolean,emit26:boolean,emit27:boolean,emit28:boolean,emit29:boolean,emit30:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.s_init.subscribe(_eventHandler.bind(view,'init'))); }
    if (emit1) { (this.subscription1 = this.context.s_slideChangeStart.subscribe(_eventHandler.bind(view,'slideChangeStart'))); }
    if (emit2) { (this.subscription2 = this.context.s_slideChangeEnd.subscribe(_eventHandler.bind(view,'slideChangeEnd'))); }
    if (emit3) { (this.subscription3 = this.context.s_slideNextStart.subscribe(_eventHandler.bind(view,'slideNextStart'))); }
    if (emit4) { (this.subscription4 = this.context.s_slideNextEnd.subscribe(_eventHandler.bind(view,'slideNextEnd'))); }
    if (emit5) { (this.subscription5 = this.context.s_slidePrevStart.subscribe(_eventHandler.bind(view,'slidePrevStart'))); }
    if (emit6) { (this.subscription6 = this.context.s_slidePrevEnd.subscribe(_eventHandler.bind(view,'slidePrevEnd'))); }
    if (emit7) { (this.subscription7 = this.context.s_transitionStart.subscribe(_eventHandler.bind(view,'transitionStart'))); }
    if (emit8) { (this.subscription8 = this.context.s_transitionEnd.subscribe(_eventHandler.bind(view,'transitionEnd'))); }
    if (emit9) { (this.subscription9 = this.context.s_touchStart.subscribe(_eventHandler.bind(view,'touchStart'))); }
    if (emit10) { (this.subscription10 = this.context.s_touchMove.subscribe(_eventHandler.bind(view,'touchMove'))); }
    if (emit11) { (this.subscription11 = this.context.s_touchMoveOpposite.subscribe(_eventHandler.bind(view,'touchMoveOpposite'))); }
    if (emit12) { (this.subscription12 = this.context.s_sliderMove.subscribe(_eventHandler.bind(view,'sliderMove'))); }
    if (emit13) { (this.subscription13 = this.context.s_touchEnd.subscribe(_eventHandler.bind(view,'touchEnd'))); }
    if (emit14) { (this.subscription14 = this.context.s_click.subscribe(_eventHandler.bind(view,'click'))); }
    if (emit15) { (this.subscription15 = this.context.s_tap.subscribe(_eventHandler.bind(view,'tap'))); }
    if (emit16) { (this.subscription16 = this.context.s_doubleTap.subscribe(_eventHandler.bind(view,'doubleTap'))); }
    if (emit17) { (this.subscription17 = this.context.s_imagesReady.subscribe(_eventHandler.bind(view,'imagesReady'))); }
    if (emit18) { (this.subscription18 = this.context.s_progress.subscribe(_eventHandler.bind(view,'progress'))); }
    if (emit19) { (this.subscription19 = this.context.s_reachBeginning.subscribe(_eventHandler.bind(view,'reachBeginning'))); }
    if (emit20) { (this.subscription20 = this.context.s_reachEnd.subscribe(_eventHandler.bind(view,'reachEnd'))); }
    if (emit21) { (this.subscription21 = this.context.s_destroy.subscribe(_eventHandler.bind(view,'destroy'))); }
    if (emit22) { (this.subscription22 = this.context.s_setTranslate.subscribe(_eventHandler.bind(view,'setTranslate'))); }
    if (emit23) { (this.subscription23 = this.context.s_setTransition.subscribe(_eventHandler.bind(view,'setTransition'))); }
    if (emit24) { (this.subscription24 = this.context.s_autoplay.subscribe(_eventHandler.bind(view,'autoplay'))); }
    if (emit25) { (this.subscription25 = this.context.s_autoplayStart.subscribe(_eventHandler.bind(view,'autoplayStart'))); }
    if (emit26) { (this.subscription26 = this.context.s_autoplayStop.subscribe(_eventHandler.bind(view,'autoplayStop'))); }
    if (emit27) { (this.subscription27 = this.context.s_lazyImageLoad.subscribe(_eventHandler.bind(view,'lazyImageLoad'))); }
    if (emit28) { (this.subscription28 = this.context.s_lazyImageReady.subscribe(_eventHandler.bind(view,'lazyImageReady'))); }
    if (emit29) { (this.subscription29 = this.context.s_paginationRendered.subscribe(_eventHandler.bind(view,'paginationRendered'))); }
    if (emit30) { (this.subscription30 = this.context.s_scroll.subscribe(_eventHandler.bind(view,'scroll'))); }
  }
}